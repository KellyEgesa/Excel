[{"/home/kelly/Documents/microsoft/excel/src/index.js":"1","/home/kelly/Documents/microsoft/excel/src/reportWebVitals.js":"2","/home/kelly/Documents/microsoft/excel/src/App.js":"3","/home/kelly/Documents/microsoft/excel/src/components/workbook.jsx":"4","/home/kelly/Documents/microsoft/excel/src/components/contextMenu.jsx":"5"},{"size":543,"mtime":1609752728253,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609275177314,"results":"8","hashOfConfig":"7"},{"size":170,"mtime":1609275931575,"results":"9","hashOfConfig":"7"},{"size":7067,"mtime":1611699117000,"results":"10","hashOfConfig":"7"},{"size":1041,"mtime":1609753768755,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"hybt5d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"/home/kelly/Documents/microsoft/excel/src/index.js",[],["27","28"],"/home/kelly/Documents/microsoft/excel/src/reportWebVitals.js",[],"/home/kelly/Documents/microsoft/excel/src/App.js",["29"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WorkBook from \"./components/workbook\";\n\nfunction App() {\n  return <WorkBook></WorkBook>;\n}\n\nexport default App;\n","/home/kelly/Documents/microsoft/excel/src/components/workbook.jsx",["30","31","32","33","34","35"],"import React, { Component } from \"react\";\nimport ContextMenu from \"./contextMenu\";\nimport axios from \"axios\";\n\nlet alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst alphabetSplit = alphabet.split(\"\");\nclass WorkBook extends Component {\n  state = {\n    showMenu: false,\n    selectedCell: \"\",\n    col: [],\n    sheet: { 0: [\"\"] },\n    selectedFile: null,\n    selectedRow: null,\n    selectedCol: null,\n  };\n\n  async componentDidMount() {\n    document\n      .querySelector(\"td[contenteditable]\")\n      .addEventListener(\"paste\", this.pasteDefaultStop);\n    document.addEventListener(\"contextmenu\", this.handleContextMenu);\n    document.addEventListener(\"click\", this.handleClick);\n    const data = {\n      fileDirectory: \"workbook/Kelly/1611685812635-Book 1.xlsx\",\n    };\n    let sheet = await axios.post(\n      \"http://localhost:3030/file/retrieveFile\",\n      data\n    );\n    this.setState({ sheet: sheet.data });\n    this.convertJsonToFile(this.state.sheet);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"click\", this.handleClick);\n    document.removeEventListener(\"contextmenu\", this.handleContextMenu);\n  }\n\n  handleContextMenu = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      xPos: `${e.pageX}px`,\n      yPos: `${e.pageY}px`,\n      showMenu: true,\n    });\n  };\n\n  handleClick = (e) => {\n    if (this.state.showMenu) this.setState({ showMenu: false });\n  };\n\n  pasteDefaultStop = (e) => {\n    e.preventDefault();\n    var text = e.clipboardData.getData(\"text/plain\");\n    document.execCommand(\"insertHTML\", false, text);\n  };\n\n  highlightCell(cell) {\n    this.setState({ selectedCell: cell, selectedRow: null, selectedCol: null });\n  }\n\n  stopRightClickSelect = (e) => {\n    if (e.nativeEvent.which === 3) {\n      e.nativeEvent.preventDefault();\n    }\n  };\n\n  convertJsonToFile(SheetValues) {\n    let length = Object.keys(SheetValues).length;\n    for (let index = 0; index < length; index++) {\n      let row = SheetValues[index];\n      for (let f = 0; f < row.length; f++) {\n        let id = alphabetSplit[f] + (index + 1);\n        document.getElementById(id).innerHTML = SheetValues[index][f];\n      }\n    }\n  }\n\n  highlightRowHeader(array, index) {\n    if (array.length < 3) {\n      return array[1] == index ? \"selectedColHeader\" : null;\n    } else {\n      let number = \"\";\n      for (let i = 1; i < array.length; i++) {\n        number += array[i];\n      }\n      return parseInt(number) == index ? \"selectedColHeader\" : null;\n    }\n  }\n  onKeyPressed(event) {\n    const { sheet } = this.state;\n    let value = document.getElementById(event).innerHTML.trim();\n    const cell = event.split(\"\");\n    let tempArray = [];\n    let row = cell[0];\n    let rowNumber = alphabetSplit.indexOf(row);\n    let column;\n\n    if (cell.length < 3) {\n      column = parseInt(cell[1]);\n      column -= 1;\n    } else {\n      let number = \"\";\n      for (let i = 1; i < cell.length; i++) {\n        number += cell[i];\n      }\n      column = parseInt(number);\n      column = column -= 1;\n    }\n\n    if (value.split(\"\")[0] === \"=\") {\n      var res = value.substr(1);\n      var multiply = new Function(\"x\", \"y\", \"return x * y\");\n      console.log(res);\n    }\n\n    if (sheet[column] == null) {\n      let last = parseInt(Object.keys(sheet).pop());\n      for (let index = last + 1; index <= column; index++) {\n        sheet[index] = [];\n      }\n    }\n\n    if (sheet[column][rowNumber] != null) {\n      let tempRow = sheet[column];\n      tempRow.splice(rowNumber, 1, value);\n    } else {\n      if (value === \"\") {\n        return;\n      }\n      let tempRow = sheet[column];\n      let diff = rowNumber + 1 - tempRow.length;\n      for (let index = 0; index < diff; index++) {\n        tempRow.push(\"\");\n      }\n      tempRow.splice(rowNumber, 1, value);\n    }\n  }\n\n  clickRow(index) {\n    this.setState({ selectedCell: \"\", selectedRow: index, selectedCol: \"\" });\n  }\n\n  clickCol(item) {\n    this.setState({ selectedCol: \"\" });\n    this.setState({ selectedCell: \"\", selectedRow: \"\", selectedCol: item });\n  }\n\n  onChangeHandler = (event) => {\n    this.setState({ selectedFile: event.target.files[0] });\n    const data = new FormData();\n    data.append(\"file\", event.target.files[0]);\n    axios.post(\"http://localhost:3030/file\", data, {}).then((res) => {\n      console.log(res.statusText);\n    });\n  };\n\n  save() {\n    const { sheet } = this.state;\n    let data = Object.values(sheet);\n    axios.post(\"http://localhost:3030/saveFile\", data).then((res) => {\n      console.log(res.statusText);\n    });\n  }\n\n  upload() {}\n  render() {\n    let colHeader = [];\n    const alphabetSplit = alphabet.split(\"\");\n    const { selectedCell, selectedRow, selectedCol } = this.state;\n    const selected = selectedCell.split(\"\");\n\n    const { showMenu, xPos, yPos } = this.state;\n\n    for (let index = 1; index < 200; index++) {\n      colHeader.push(\n        <tr key={index} className={index == selectedRow ? \"selectedRow\" : null}>\n          <td\n            className={this.highlightRowHeader(selected, index)}\n            id=\"colHeader\"\n            onClick={() => this.clickRow(index)}\n          >\n            {index}\n          </td>\n          {alphabetSplit.map((item) => {\n            return (\n              <td\n                key={item}\n                id={`${item}${index}`}\n                className={\n                  selectedCell === `${item}${index}`\n                    ? \"workAreaSelected\"\n                    : \"workArea\"\n                }\n                contentEditable=\"true\"\n                onClick={() => this.highlightCell(`${item}${index}`)}\n                onBlur={() => this.onKeyPressed(`${item}${index}`)}\n                onMouseDown={this.stopRightClickSelect}\n              ></td>\n            );\n          })}\n        </tr>\n      );\n    }\n\n    return (\n      <div>\n        <ContextMenu\n          showMenu={showMenu}\n          xPos={xPos}\n          yPos={yPos}\n          onSave={() => this.save()}\n        ></ContextMenu>\n        <button onClick={() => this.save()}>Save</button>\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n          <input type=\"file\" id=\"file-upload\" onChange={this.onChangeHandler} />\n          Upload\n        </label>\n        <table>\n          {selectedCol ? (\n            <colgroup>\n              <col span={alphabetSplit.indexOf(selectedCol) + 1} />\n              <col style={{ border: \"3px solid#1d6f42\" }}></col>{\" \"}\n            </colgroup>\n          ) : null}\n\n          <thead>\n            <tr>\n              <th></th>\n              {alphabetSplit.map((item) => {\n                return (\n                  <th\n                    className={\n                      selected[0] === item ? \"selectedRowHeader\" : null\n                    }\n                    key={item}\n                    id=\"rowHeader\"\n                    onClick={() => this.clickCol(item)}\n                  >\n                    {item}\n                  </th>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>{colHeader}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default WorkBook;\n","/home/kelly/Documents/microsoft/excel/src/components/contextMenu.jsx",["36"],"import React, { Component } from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nconst ContextMenu = (props) => {\n  const { showMenu, xPos, yPos, onSave } = props;\n  return (\n    <Motion\n      defaultStyle={{ opacity: 0 }}\n      style={{ opacity: !showMenu ? spring(0) : spring(1) }}\n    >\n      {(interpolatedStyle) => (\n        <>\n          {showMenu ? (\n            <div\n              className=\"menu-container\"\n              style={{\n                position: \"absolute\",\n                top: yPos,\n                left: xPos,\n                opacity: interpolatedStyle.opacity,\n              }}\n            >\n              <ul className=\"list-group\" style={{ backgroundColor: \"blue\" }}>\n                <li className=\"list-group-item\" onClick={onSave}>\n                  Save\n                </li>\n                <li className=\"list-group-item\">Add a contributor</li>\n              </ul>\n            </div>\n          ) : (\n            <></>\n          )}\n        </>\n      )}\n    </Motion>\n  );\n};\n\nexport default ContextMenu;\n",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"48","line":83,"column":23,"nodeType":"49","messageId":"50","endLine":83,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":89,"column":31,"nodeType":"49","messageId":"50","endLine":89,"endColumn":33},{"ruleId":"43","severity":1,"message":"51","line":96,"column":9,"nodeType":"45","messageId":"46","endLine":96,"endColumn":18},{"ruleId":"43","severity":1,"message":"52","line":115,"column":11,"nodeType":"45","messageId":"46","endLine":115,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":115,"column":22,"nodeType":"55","messageId":"56","endLine":115,"endColumn":60},{"ruleId":"47","severity":1,"message":"48","line":179,"column":42,"nodeType":"49","messageId":"50","endLine":179,"endColumn":44},{"ruleId":"43","severity":1,"message":"57","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},{"ruleId":"39","replacedBy":"58"},{"ruleId":"41","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'tempArray' is assigned a value but never used.","'multiply' is assigned a value but never used.","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","'Component' is defined but never used.",["60"],["61"],"no-global-assign","no-unsafe-negation"]